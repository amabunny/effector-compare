{"version":3,"sources":["features/todos/organisms/list/style.module.less","features/@core/molecules/menu/style.module.less","features/@core/molecules/form-item/style.module.less","features/@core/index.ts","features/@core/utils/service-worker.ts","features/@core/molecules/form-item/index.tsx","features/@core/fabrics/create-data-store.ts","features/@core/utils/navigation.tsx","features/@core/utils/local-storage.ts","features/@core/molecules/menu/index.tsx","features/@core/model/events.ts","features/@core/model/index.ts","features/@core/templates/base-template/index.tsx","features/@core/atoms/container/style.module.less","features/@core/templates/base-template/style.module.less","features/@intl/types.ts","api/tasks-api.ts","api/self.ts","features/@models/intl.ts","features/@intl/model/events.ts","features/@intl/model/contracts.ts","features/@intl/model/index.ts","features/todos/types.ts","features/todos/model/effects.ts","features/todos/model/events.ts","features/todos/model/index.ts","features/todos/organisms/form/index.tsx","features/todos/organisms/list/index.tsx","features/todos/molecules/filter-types-select/index.tsx","features/todos/organisms/root/index.tsx","features/todos/templates/todos-template/index.tsx","features/settings/organisms/languages-select/index.tsx","features/settings/organisms/root/index.tsx","features/sequences/model/events.ts","features/sequences/model/index.ts","features/sequences/organisms/root/index.tsx","app/router.tsx","features/todos/pages/todos.tsx","features/about/pages/about.tsx","features/settings/pages/settings.tsx","features/sequences/pages/index.tsx","index.tsx","app/index.tsx","features/todos/organisms/root/style.module.less","features/@core/atoms/container/index.tsx","features/sequences/organisms/root/style.module.less"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","FormItem","children","label","vertical","className","cn","classes","wrapper","createDataStore","initialValue","eachParams","initialState","loading","data","loadData","createEffect","handler","$store","createStore","on","pending","done","result","fail","message","schemaPrefix","REACT_APP_SITE_PREFIX","mapRoutesSchemaToJsx","schema","Object","entries","map","path","Component","key","ls","getKey","params","type","menuItems","intl","icon","Menu","link","to","id","setPageSetting","createEvent","payload","BaseTemplate","pageTitle","header","headerContainer","content","contentPaper","footer","Date","getFullYear","AvailableLocales","tasksApi","Promise","resolve","reject","tasks","localStorage","getItem","setTimeout","JSON","parse","todos","setItem","stringify","sitePrefix","selfApi","axios","create","baseURL","intlModel","localeCode","changeLocale","availableLocalesContract","union","values","LOCALE_KEY","a","$locale","_","locale","watch","persistedLocale","valid","persistedDataContract","ValidationError","removeItem","TodoFilterTypes","loadTasks","addTask","addTaskWithDetails","deleteTask","toggleTodoDone","toggleTodoDoneWithDetails","setParams","$todos","finally","initialized","taskTimestamp","filter","task","timestamp","todoTimestamp","doneTimestamp","flag","todo","isDone","initialParamsState","dates","moment","add","startOf","endOf","filterString","filterType","allTasks","$params","$reversedTodos","reverse","$preparedTodos","combine","reversedTodos","preparedTodos","justDoneTasks","justUndoneTasks","item","itemMomentDate","startPeriod","endPeriod","itemDateMoreThanStartPeriod","isSameOrAfter","itemDateLessThanEndPeriod","isSameOrBefore","description","toUpperCase","includes","getTime","undefined","Form","formatMessage","useIntl","useState","setDescription","emptyDescError","setEmptyDescError","submitForm","useCallback","onDescriptionChange","e","target","value","onTextAreaKeydown","preventDefault","onSubmit","Title","level","Item","validateStatus","required","extra","TextArea","onChange","onKeyDown","rows","htmlType","List","itemClassName","items","useList","date","doneDate","cardExtra","gutter","checked","onClick","Fragment","size","title","hour","minute","day","month","card","fade","Paragraph","taskText","FilterTypesSelect","selectStyle","useMemo","width","onSelectChange","style","Option","defaultDateFormat","localeData","longDateFormat","TodosRoot","useStore","useStoreMap","store","keys","fn","onFilterTypeChange","onFilterStringChange","onDatesChange","useEffect","spinning","grid","RangePicker","allowClear","format","Search","placeholder","form","list","listItem","TodosTemplate","LanguagesSelect","Root","addSequenceItem","addSequenceItemWithDetails","addTimeoutToSequenceElement","filterSequence","clearSequence","addLogRecord","resetLogs","$sequences","concat","timeout","sequenceItem","delayInSec","Math","floor","random","sequences","some","sample","forEach","clearTimeout","$logs","logs","newRecord","reset","formatDate","onResetClick","buttons","Array","fill","index","year","delay","textarea","readOnly","join","appRoutes","Router","ReactDOM","render","$intl","userLocale","getUserLocale","String","length","messages","document","getElementById","Container","ownStyle","margin"],"mappings":"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","file":"static/js/main.f720aa03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"src-features-todos-organisms-list-style-module__card--200_m\",\"done\":\"src-features-todos-organisms-list-style-module__done--1N2TR\",\"taskText\":\"src-features-todos-organisms-list-style-module__taskText--2HLjw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"src-features--core-molecules-menu-style-module__wrapper--13-Og\",\"link\":\"src-features--core-molecules-menu-style-module__link--1aKhZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"src-features--core-molecules-form-item-style-module__wrapper--2-UTF\",\"vertical\":\"src-features--core-molecules-form-item-style-module__vertical--2DTXu\"};","import * as serviceWorker from './utils/service-worker'\nexport * from './templates/base-template'\nexport * from './molecules/form-item'\nexport * from './atoms/container'\nexport * from './fabrics/create-data-store'\nexport * from './types'\nexport * from './utils/navigation'\nexport * from './utils/local-storage'\nexport { serviceWorker }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport cn from 'classnames'\nimport classes from './style.module.less'\n\ninterface IProps {\n  children: React.ReactNode\n  label: React.ReactNode\n  vertical?: boolean\n}\n\nexport const FormItem = ({ children, label, vertical }: IProps) => {\n  return (\n    <div\n      className={cn(classes.wrapper, {\n        [classes.vertical]: vertical\n      })}\n    >\n      <label>\n        {label}:\n      </label>\n\n      <div>\n        {children}\n      </div>\n    </div>\n  )\n}\n","import { createStore, createEffect } from 'effector'\n\ninterface IData<T> {\n  loading: boolean\n  data: T\n  error: string | null\n}\n\ninterface ICreateDataStore<T, LoadDataParams> {\n  initialValue: T\n  loadData: (params: LoadDataParams) => Promise<T>\n}\n\nexport const createDataStore = <\n  Type,\n  LoadDataParams\n>({ initialValue, ...eachParams }: ICreateDataStore<Type, LoadDataParams>) => {\n  const initialState: IData<Type> = {\n    loading: false,\n    data: initialValue,\n    error: null\n  }\n\n  const loadData = createEffect({\n    handler: eachParams.loadData\n  })\n\n  const $store = createStore(initialState)\n\n  $store\n    .on(\n      loadData.pending, (state, loading) => ({\n        ...state,\n        loading\n      })\n    )\n    .on(\n      loadData.done, (state, { result }) => ({\n        ...state,\n        data: result,\n        error: null\n      })\n    )\n    .on(\n      loadData.fail, (state, { error }) => ({\n        ...state,\n        error: error.message\n      })\n    )\n\n  return {\n    $store,\n    loadData\n  }\n}\n","import React from 'react'\nimport { IRoutesSchema } from '../types'\n\nconst schemaPrefix = process.env.REACT_APP_SITE_PREFIX || ''\n\nexport const mapRoutesSchemaToJsx = (schema: IRoutesSchema) => Object.entries(schema).map(([path, Component]) => (\n  <Component\n    path={schemaPrefix + path}\n    key={path}\n  />\n))","interface IGetLocaleKey {\n  type: 'LOCALE'\n}\n\ntype TGetKeyMapper =\n  | IGetLocaleKey\n\nconst getKey = (params: TGetKeyMapper) => {\n  switch (params.type) {\n    case 'LOCALE':\n      return params.type\n  }\n}\n\nexport const ls = {\n  getKey\n}\n","import React from 'react'\nimport { Link } from '@reach/router'\nimport { FormattedMessage } from 'react-intl'\nimport { Icon } from 'antd'\nimport classes from './style.module.less'\n\ninterface IMenuItem {\n  intl: string\n  path: string\n  icon: string\n}\n\nconst menuItems: IMenuItem[] = [\n  {\n    intl: 'menu.todos',\n    path: '/',\n    icon: 'unordered-list'\n  },\n  {\n    intl: 'menu.sequences',\n    path: '/sequences',\n    icon: 'ordered-list'\n  },\n  {\n    intl: 'menu.about',\n    path: '/about',\n    icon: 'user'\n  },\n  {\n    intl: 'menu.settings',\n    path: '/settings',\n    icon: 'setting'\n  }\n]\n\nexport const Menu = () => (\n  <ul className={classes.wrapper}>\n    {menuItems.map(({ intl, path, icon }) =>\n      <li key={path}>\n        <Link\n          className={classes.link}\n          to={path}\n        >\n          <Icon type={icon} />\n          <FormattedMessage id={intl} />\n        </Link>\n      </li>\n    )}\n  </ul>\n)\n","import { createEvent } from 'effector'\nimport { IPageSettings } from '../types'\n\nexport const setPageSetting = createEvent<Partial<IPageSettings>>()\n","import { createStore } from 'effector'\nimport { setPageSetting } from './events'\nimport { IPageSettings } from '../types'\n\nexport const DEFAULT_PROJECT_NAME = '@mabunny repo'\n\nconst $pageSettings = createStore<IPageSettings>({\n\n})\n\n$pageSettings.on(\n  setPageSetting, (state, payload) => ({\n    ...state,\n    ...payload\n  })\n)\n\nexport {\n  $pageSettings,\n  setPageSetting\n}\n","import React from 'react'\nimport { Container } from '../../atoms/container'\nimport { Menu } from '../../molecules/menu'\nimport { DEFAULT_PROJECT_NAME } from '../../model'\nimport classes from './style.module.less'\n\ninterface IProps {\n  children: React.ReactNode\n  pageTitle?: React.ReactNode\n}\n\nexport const BaseTemplate = ({\n  children,\n  pageTitle = DEFAULT_PROJECT_NAME\n}: IProps) => {\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.header}>\n        <Container>\n          <div className={classes.headerContainer}>\n            <div>\n              {pageTitle}\n            </div>\n\n            <Menu />\n          </div>\n        </Container>\n      </div>\n\n      <div className={classes.content}>\n        <div className={classes.contentPaper}>\n          {children}\n        </div>\n\n        <div className={classes.footer}>\n          <Container>\n            {DEFAULT_PROJECT_NAME}, {new Date().getFullYear()}\n          </Container>\n        </div>\n      </div>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"src-features--core-atoms-container-style-module__wrapper--3HEqC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"src-features--core-templates-base-template-style-module__wrapper--29jfN\",\"header\":\"src-features--core-templates-base-template-style-module__header--3saGR\",\"headerContainer\":\"src-features--core-templates-base-template-style-module__headerContainer--r1tf3\",\"menu\":\"src-features--core-templates-base-template-style-module__menu--22-LA\",\"content\":\"src-features--core-templates-base-template-style-module__content--3N1MR\",\"contentPaper\":\"src-features--core-templates-base-template-style-module__contentPaper--JcCqh\",\"footer\":\"src-features--core-templates-base-template-style-module__footer--3xY5G\"};","export enum AvailableLocales {\n  en_US = 'en-US',\n  ru_RU = 'ru-RU'\n}\n","import { ITodo } from 'features/todos'\n\nconst DEFAULT_TASKS_PROMISE_MS_DELAY = 1000\n\nconst load = () => new Promise<ITodo[]>((resolve, reject) => {\n  const tasks = localStorage.getItem('tasks')\n\n  setTimeout(() => {\n    if (tasks) {\n      resolve(JSON.parse(tasks))\n    } else {\n      reject(tasks)\n    }\n  }, DEFAULT_TASKS_PROMISE_MS_DELAY)\n})\n\nconst save = (todos: ITodo[]) => {\n  localStorage.setItem('tasks', JSON.stringify(todos))\n}\n\nexport const tasksApi = {\n  load,\n  save\n}\n","import axios from 'axios'\n\nconst sitePrefix = process.env.REACT_APP_SITE_PREFIX || '/'\n\nexport const selfApi = axios.create({\n  baseURL: sitePrefix\n})\n","import { selfApi } from 'api'\nimport { IDictionary } from 'features/@core'\n\nexport interface IntlLoadLocalization {\n  localeCode: string\n}\n\nconst loadLocalization = ({ localeCode }: IntlLoadLocalization) => {\n  return selfApi.get<IDictionary<string>>(`locales/${localeCode}.json`)\n}\n\nexport const intlModel = {\n  loadLocalization\n}\n","import { createEvent } from 'effector'\nimport { AvailableLocales } from '../types'\n\nexport const changeLocale = createEvent<AvailableLocales>()\n","import { union, Contract } from 'typed-contracts'\nimport { AvailableLocales } from '../types'\n\nexport const availableLocalesContract: Contract<AvailableLocales> = union(...Object.values(AvailableLocales))\n","import { createStore} from 'effector'\nimport { ValidationError } from 'typed-contracts'\nimport { createDataStore, IDictionary, ls } from 'features/@core'\nimport { intlModel } from 'features/@models'\nimport { changeLocale } from './events'\nimport { AvailableLocales } from '../types'\nimport { availableLocalesContract } from './contracts'\n\nconst LOCALE_KEY = ls.getKey({ type: 'LOCALE' })\n\nconst initialValue: IDictionary<string> = {}\n\nconst { $store, loadData } = createDataStore({\n  initialValue,\n  loadData: async (localeCode: string) => {\n    const { data } = await intlModel.loadLocalization({ localeCode })\n    return data\n  }\n})\n\nconst $locale = createStore<null | AvailableLocales>(null)\n\n$locale\n  .on(changeLocale, (_, locale) => locale)\n\n$locale.watch(localeCode => {\n  if (localeCode !== null) {\n    loadData(localeCode)\n    localStorage.setItem(LOCALE_KEY, localeCode)\n  }\n})\n\nconst persistedLocale = localStorage.getItem(LOCALE_KEY)\n\nif (persistedLocale) {\n  const persistedDataContract = availableLocalesContract('persistedData')\n  const valid = persistedDataContract(persistedLocale)\n\n  if (!(valid instanceof ValidationError)) {\n    changeLocale(valid)\n  } else {\n    localStorage.removeItem(LOCALE_KEY)\n  }\n}\n\nexport {\n  $store as $intl,\n  loadData as loadIntlData,\n  $locale,\n  changeLocale\n}\n","import { Moment } from 'moment'\n\nexport interface ITodo {\n  timestamp: number\n  description: string\n  isDone: boolean\n  doneTimestamp?: number\n}\n\nexport enum TodoFilterTypes {\n  justDoneTasks = 'justDoneTasks',\n  justUndoneTasks = 'justUndoneTasks',\n  allTasks = 'allTasks'\n}\n\nexport interface ITodosState {\n  loading: boolean\n  data: ITodo[]\n}\n\nexport interface IParams {\n  filterType: TodoFilterTypes\n  filterString: string\n  dates: [Moment, Moment] | null\n  initialized: boolean\n}\n","import { createEffect } from 'effector'\nimport { tasksApi } from 'api'\n\nexport const loadTasks = createEffect({\n  handler () {\n    return tasksApi.load()\n  }\n})\n","import { createEvent } from 'effector'\nimport { IParams } from '../types'\n\ninterface IAddTask {\n  description: string\n}\n\nexport const addTask = createEvent<IAddTask>()\n\ninterface IAddTaskWithDetails extends IAddTask {\n  isDone: boolean\n  timestamp: number\n}\n\nexport const addTaskWithDetails = createEvent<IAddTaskWithDetails>()\n\ninterface IDeleteTask {\n  taskTimestamp: number\n}\n\nexport const deleteTask = createEvent<IDeleteTask>()\n\ninterface IToggleTodoDone {\n  todoTimestamp: number\n  flag: boolean\n}\n\nexport const toggleTodoDone = createEvent<IToggleTodoDone>()\n\ninterface IToggleTodoDoneWithDetails extends IToggleTodoDone {\n  doneTimestamp?: number\n}\n\nexport const toggleTodoDoneWithDetails = createEvent<IToggleTodoDoneWithDetails>()\n\nexport const setParams = createEvent<Partial<IParams>>()","import { createStore, combine } from 'effector'\nimport moment from 'moment'\nimport { loadTasks } from './effects'\nimport {\n  addTask,\n  addTaskWithDetails,\n  deleteTask,\n  toggleTodoDone,\n  toggleTodoDoneWithDetails,\n  setParams\n} from './events'\nimport { ITodosState, TodoFilterTypes, IParams } from '../types'\nimport { tasksApi } from 'api'\n\nconst initialState: ITodosState = {\n  loading: false,\n  data: []\n}\n\nconst $todos = createStore(initialState)\n\n$todos\n  .on(\n    loadTasks, (state) => ({\n      ...state,\n      loading: true\n    })\n  )\n  .on(\n    loadTasks.done, (state, { result }) => ({\n      ...state,\n      data: result\n    })\n  )\n  .on(\n    loadTasks.fail, (state) => ({\n      ...state,\n      data: []\n    })\n  )\n  .on(\n    loadTasks.finally, (state) => ({\n      ...state,\n      loading: false,\n      initialized: true\n    })\n  )\n  .on(\n    addTaskWithDetails, (state, payload) => ({\n      ...state,\n      data: [\n        ...state.data,\n        payload\n      ]\n    })\n  )\n  .on(\n    deleteTask, (state, { taskTimestamp }) => ({\n      ...state,\n      data: state.data.filter(task => task.timestamp !== taskTimestamp)\n    })\n  )\n  .on(\n    toggleTodoDoneWithDetails, (state, { todoTimestamp, doneTimestamp, flag }) => ({\n      ...state,\n      data: state.data.map(todo => {\n        if (todo.timestamp === todoTimestamp) {\n          return {\n            ...todo,\n            isDone: flag,\n            doneTimestamp\n          }\n        }\n\n        return todo\n      })\n    })\n  )\n\nconst initialParamsState: IParams = {\n  dates: [\n    moment().add(-1, 'week').startOf('week').startOf('day'),\n    moment().endOf('week').endOf('day')\n  ],\n  filterString: '',\n  filterType: TodoFilterTypes.allTasks,\n  initialized: false\n}\n\nconst $params = createStore(initialParamsState)\n\n$params.on(setParams, (state, params) => ({\n  ...state,\n  ...params\n}))\n\nconst $reversedTodos = $todos.map(state =>\n  [...state.data].reverse()\n)\n\nconst $preparedTodos = combine($reversedTodos, $params, (reversedTodos, { filterType, filterString, dates }) => {\n  let preparedTodos = [...reversedTodos]\n\n  switch (filterType) {\n    case TodoFilterTypes.justDoneTasks:\n      preparedTodos = preparedTodos.filter(todo => todo.isDone)\n      break\n\n    case TodoFilterTypes.justUndoneTasks:\n      preparedTodos = preparedTodos.filter(todo => !todo.isDone)\n      break\n  }\n\n  if (dates) {\n    preparedTodos = preparedTodos.filter(item => {\n      const itemMomentDate = moment(item.timestamp).startOf('day')\n      const [startPeriod, endPeriod] = dates\n\n      const itemDateMoreThanStartPeriod =  itemMomentDate.isSameOrAfter(startPeriod)\n      const itemDateLessThanEndPeriod = itemMomentDate.isSameOrBefore(endPeriod)\n\n      if (itemDateMoreThanStartPeriod && itemDateLessThanEndPeriod) {\n        return true\n      }\n\n      return false\n    })\n  }\n\n  if (filterString) {\n    preparedTodos = preparedTodos.filter(todo =>\n      todo.description.toUpperCase().includes(\n        filterString.toUpperCase()\n      )\n    )\n  }\n\n  return preparedTodos\n})\n\n/*\n  1. Save using forward. Better for functional programming\n\n  forward({\n    from: addTaskWithDetails,\n    to: saveEvent\n  })\n\n  forward({\n    from: deleteTask,\n    to: saveEvent\n  })\n\n  forward({\n    from: toggleTodoDoneWithDetails,\n    to: saveEvent\n  })\n\n  sample($todos, saveEvent, state => state.data).watch(data => {\n    tasksApi.save(data)\n  })\n\n  2. It also can be untyped merge\n\n  const updated = merge([ addTaskWithDetails, deleteTask, toggleTodoDoneWithDetails ])\n\n  sample($todos, updated, state => state.data).watch(data => {\n    tasksApi.save(data)\n  })\n*/\n\nconst $todosAndInitialized = combine($todos, $params, ({ data }, { initialized }) => ({\n  data,\n  initialized\n}))\n\n$todosAndInitialized.watch(({ data, initialized }) => {\n  if (!initialized) { return }\n\n  tasksApi.save(data)\n})\n\naddTask.watch(payload => {\n  addTaskWithDetails({\n    ...payload,\n    isDone: false,\n    timestamp: new Date().getTime()\n  })\n})\n\ntoggleTodoDone.watch(payload => {\n  const { flag } = payload\n\n  const doneTimestamp = flag\n    ? new Date().getTime()\n    : undefined\n\n  toggleTodoDoneWithDetails({\n    ...payload,\n    doneTimestamp\n  })\n})\n\nexport {\n  $todos,\n  $preparedTodos,\n  $params,\n  addTask,\n  deleteTask,\n  toggleTodoDone,\n  loadTasks,\n  setParams\n}\n","import React, { useState, useCallback } from 'react'\nimport { useIntl } from 'react-intl'\nimport { Form as AntdForm, Input, Button, Typography } from 'antd'\nimport { addTask } from '../../model'\n\ninterface IProps {\n  className?: string\n}\n\nexport const Form = ({ className }: IProps) => {\n  const { formatMessage } = useIntl()\n  const [description, setDescription] = useState('')\n  const [emptyDescError, setEmptyDescError] = useState(false)\n\n  const submitForm = useCallback(\n    () => {\n      if (description) {\n        addTask({ description })\n        setDescription('')\n        setEmptyDescError(false)\n      } else {\n        setEmptyDescError(true)\n      }\n    },\n    [description]\n  )\n\n  const onDescriptionChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setDescription(e.target.value)\n    },\n    []\n  )\n\n  const onTextAreaKeydown = useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      const { key } = e\n\n      if (key === 'Enter') {\n        e.preventDefault()\n        submitForm()\n      }\n    },\n    [submitForm]\n  )\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault()\n      submitForm()\n    },\n    [submitForm]\n  )\n\n  return (\n    <AntdForm\n      onSubmit={onSubmit}\n      className={className}\n    >\n      <Typography.Title level={4}>\n        {formatMessage({ id: 'tasks.form.addTask' })}\n      </Typography.Title>\n\n      <AntdForm.Item\n        label={formatMessage({ id: 'tasks.form.description' })}\n        validateStatus={emptyDescError ? 'error' : 'success'}\n        required\n        extra={emptyDescError ? formatMessage({ id: 'tasks.form.enterDescription' }) : ''}\n      >\n        <Input.TextArea\n          value={description}\n          onChange={onDescriptionChange}\n          onKeyDown={onTextAreaKeydown}\n          rows={4}\n        />\n      </AntdForm.Item>\n\n      <AntdForm.Item>\n        <Button type='primary' htmlType='submit'>\n          {formatMessage({ id: 'tasks.form.add' })}\n        </Button>\n      </AntdForm.Item>\n    </AntdForm>\n  )\n}\n","import React from 'react'\nimport cn from 'classnames'\nimport { FormattedDate } from 'react-intl'\nimport { Card, Row, Col, Icon, Checkbox, Typography } from 'antd'\nimport { useList } from 'effector-react'\nimport { $preparedTodos, toggleTodoDone, deleteTask } from '../../model'\nimport classes from './style.module.less'\n\ninterface IProps {\n  itemClassName?: string\n}\n\nexport const List = ({ itemClassName }: IProps) => {\n  const items = useList($preparedTodos, ({\n    description,\n    doneTimestamp,\n    isDone,\n    timestamp,\n  }) => {\n    const date = new Date(timestamp)\n\n    const doneDate = doneTimestamp\n      ? new Date(doneTimestamp)\n      : undefined\n\n    const cardExtra = (\n      <Row type='flex' gutter={8}>\n        <Col>\n          <Checkbox\n            checked={isDone}\n            onChange={e => toggleTodoDone({ todoTimestamp: timestamp, flag: !isDone })}\n          />\n        </Col>\n\n        <Col>\n          <Icon\n            type='close'\n            onClick={() => deleteTask({ taskTimestamp: timestamp })}\n          />\n        </Col>\n      </Row>\n    )\n\n    return (\n      <React.Fragment>\n        <Card\n          size='small'\n          extra={cardExtra}\n          title={(\n            <FormattedDate\n              value={date}\n              hour='numeric'\n              minute='numeric'\n              day='numeric'\n              month='long'\n            />\n          )}\n          className={cn(itemClassName, classes.card, {\n            fade: isDone\n          })}\n          key={timestamp}\n        >\n          <Typography.Paragraph className={classes.taskText}>\n            {description}\n          </Typography.Paragraph>\n\n          {!!doneDate && (\n            <div className={classes.done}>\n              <span>\n                <Icon type='check-circle' />\n              </span>\n\n              <span>\n                <span>\n                  <FormattedDate\n                    value={doneDate}\n                    hour='numeric'\n                    minute='numeric'\n                    day='numeric'\n                    month='long'\n                  />\n                </span>\n              </span>\n            </div>\n          )}\n        </Card>\n      </React.Fragment>\n    )\n  })\n\n  return (\n    <React.Fragment>\n      {items}\n    </React.Fragment>\n  )\n}\n","import React, { Fragment, useMemo, useCallback } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Select } from 'antd'\nimport { SelectValue } from 'antd/lib/select'\nimport { TodoFilterTypes } from '../../types'\n\ninterface IProps {\n  value: TodoFilterTypes\n  onChange: (filterType: TodoFilterTypes) => void\n}\n\nexport const FilterTypesSelect = ({ value, onChange }: IProps) => {\n  const selectStyle = useMemo(\n    (): React.CSSProperties => ({\n      width: '200px'\n    }),\n    []\n  )\n\n  const onSelectChange = useCallback(\n    (value: SelectValue) => {\n      if (typeof value === 'string') {\n        const castedValue = value as TodoFilterTypes\n        onChange(castedValue)\n      }\n    },\n    [onChange]\n  )\n\n  return (\n    <Fragment>\n      <Select\n        value={value}\n        style={selectStyle}\n        onChange={onSelectChange}\n      >\n        {Object.values(TodoFilterTypes).map(key =>\n          <Select.Option\n            key={key}\n            value={key}\n          >\n            <FormattedMessage id={`tasks.filterTypesSelect.${key}`} />\n          </Select.Option>\n        )}\n      </Select>\n    </Fragment>\n  )\n}\n","import React, { useEffect, useCallback } from 'react'\nimport { Spin, DatePicker, Input } from 'antd'\nimport { RangePickerProps } from 'antd/lib/date-picker/interface'\nimport { useStoreMap, useStore } from 'effector-react'\nimport moment from 'moment'\nimport { Form } from '../form'\nimport { List } from '../list'\nimport { FilterTypesSelect } from '../../molecules/filter-types-select'\nimport { $todos, $params, setParams, loadTasks } from '../../model'\nimport { TodoFilterTypes } from '../../types'\nimport classes from './style.module.less'\n\nconst defaultDateFormat = moment().localeData().longDateFormat('L')\n\nexport const TodosRoot = () => {\n  const { dates, filterString, filterType } = useStore($params)\n\n  const { loading } = useStoreMap({\n    store: $todos,\n    keys: [],\n    fn: ({ loading }) => ({ loading })\n  })\n\n  const onFilterTypeChange = useCallback(\n    (filterType: TodoFilterTypes) => {\n      setParams({ filterType })\n    },\n    []\n  )\n\n  const onFilterStringChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setParams({ filterString: e.target.value })\n    },\n    []\n  )\n\n  const onDatesChange = useCallback<NonNullable<RangePickerProps['onChange']>>(\n    ([startPeriod, endPeriod]) => {\n      if (startPeriod && endPeriod) {\n        setParams({ dates: [startPeriod, endPeriod] })\n      } else {\n        setParams({ dates: null })\n      }\n    },\n    []\n  )\n\n  useEffect(\n    () => {\n      loadTasks()\n    },\n    []\n  )\n\n  return (\n    <Spin spinning={loading}>\n      <div className={classes.grid}>\n        <div className={classes.filter}>\n          <div>\n            <FilterTypesSelect\n              value={filterType}\n              onChange={onFilterTypeChange}\n            />\n          </div>\n\n          <div>\n            <DatePicker.RangePicker\n              allowClear\n              onChange={onDatesChange}\n              format={defaultDateFormat}\n              value={dates || undefined}\n              style={{ width: '289px' }}\n            />\n          </div>\n\n          <div>\n            <Input.Search\n              value={filterString}\n              onChange={onFilterStringChange}\n              placeholder='Поиск...'\n            />\n          </div>\n        </div>\n\n        <Form className={classes.form} />\n\n        <div className={classes.list}>\n          <List itemClassName={classes.listItem} />\n        </div>\n      </div>\n    </Spin>\n  )\n}\n","import React from 'react'\nimport { BaseTemplate, Container } from 'features/@core'\n\ninterface IProps {\n  children: React.ReactNode\n}\n\nexport const TodosTemplate = ({ children }: IProps) => {\n  return (\n    <BaseTemplate pageTitle='Todos'>\n      <Container>\n        {children}\n      </Container>\n    </BaseTemplate>\n  )\n}\n","import React, { useCallback } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useStore } from 'effector-react'\nimport { Select } from 'antd'\nimport { AvailableLocales, $locale, changeLocale } from 'features/@intl'\n\ninterface IProps {\n  style?: React.CSSProperties\n}\n\nexport const LanguagesSelect = ({ style }: IProps) => {\n  const locale = useStore($locale)\n\n  const onChange = useCallback(\n    (value: AvailableLocales) => {\n      changeLocale(value)\n    },\n    []\n  )\n\n  return (\n    <Select\n      style={style}\n      value={locale || undefined}\n      onChange={onChange}\n    >\n      {Object.values(AvailableLocales).map(locale =>\n        <Select.Option\n          value={locale}\n          key={locale}\n        >\n          <FormattedMessage id={`settings.languagesSelect.${locale}`} />\n        </Select.Option>\n      )}\n    </Select>\n  )\n}\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { FormItem } from 'features/@core'\nimport { LanguagesSelect } from '../languages-select'\n\nexport const Root = () => {\n  return (\n    <div>\n      <FormItem\n        label={<FormattedMessage id='settings.languagesSelect' />}\n        vertical\n      >\n        <LanguagesSelect style={{ width: '250px' }} />\n      </FormItem>\n    </div>\n  )\n}\n","import { createEvent } from 'effector'\nimport { ISequenceItem } from '../types'\n\nexport const addSequenceItem = createEvent<Pick<ISequenceItem, 'handler'>>()\n\nexport const addSequenceItemWithDetails = createEvent<ISequenceItem>()\n\nexport const addTimeoutToSequenceElement = createEvent<{ timeout: NodeJS.Timeout, item: ISequenceItem }>()\n\ntype FilterPredicate = {\n  filter: (item: ISequenceItem) => boolean\n}\n\nexport const filterSequence = createEvent<FilterPredicate>()\n\nexport const clearSequence = createEvent<FilterPredicate>()\n\nexport const addLogRecord = createEvent<string>()\n\nexport const resetLogs = createEvent()\n","import { createStore, sample } from 'effector'\nimport {\n  addLogRecord,\n  addSequenceItem,\n  addSequenceItemWithDetails,\n  addTimeoutToSequenceElement,\n  filterSequence,\n  clearSequence,\n  resetLogs\n} from './events'\nimport { ISequenceItem } from '../types'\n\n// It also can be wrapped into function to follow \"Fabric\" pattern.\n\nconst MAXIMUM_DELAY_SECONDS = 10\n\nconst $sequences = createStore<ISequenceItem[]>([])\n\n$sequences\n  .on(addSequenceItemWithDetails, (state, item) => state.concat(item))\n  .on(addTimeoutToSequenceElement, (state, { item, timeout }) => state.map(sequenceItem => {\n    if (item.timestamp === sequenceItem.timestamp) {\n      return {\n        ...item,\n        timeout\n      }\n    }\n\n    return sequenceItem\n  }))\n  .on(filterSequence, (state, { filter }) => state.filter(filter))\n\naddSequenceItem.watch(({ handler }) => {\n  const delayInSec = Math.floor(Math.random() * MAXIMUM_DELAY_SECONDS) + 1\n  const timestamp = new Date().getTime()\n\n  const sequenceItem: ISequenceItem = {\n    delayInSec,\n    handler,\n    task: () => setTimeout(() => {\n      handler(sequenceItem)\n      clearSequence({ filter: item => timestamp !== item.timestamp })\n    }, delayInSec * 1000),\n    timestamp\n  }\n\n  addSequenceItemWithDetails(sequenceItem)\n})\n\n$sequences.watch(sequences => {\n  const sequenceStarted = sequences.some(({ timeout }) => Boolean(timeout))\n\n  if (!sequenceStarted) {\n    const sequenceItem = sequences[0]\n\n    if (sequenceItem) {\n      const timeout = sequenceItem.task()\n\n      addTimeoutToSequenceElement({\n        item: sequenceItem,\n        timeout\n      })\n    }\n  }\n})\n\n$sequences.watch(console.log)\n\nconst sampledClearSequence = sample(\n  $sequences,\n  clearSequence,\n  (sequences, { filter }) => ({ sequences, filter })\n)\n\nsampledClearSequence.watch(({ filter, sequences }) => {\n  sequences.forEach(sequenceItem => {\n    if (!filter(sequenceItem) && sequenceItem.timeout) {\n      clearTimeout(sequenceItem.timeout)\n    }\n  })\n\n  filterSequence({ filter })\n})\n\nconst $logs = createStore<string[]>([])\n\n$logs\n  .on(addLogRecord, (logs, newRecord) => logs.concat(newRecord))\n  .reset(resetLogs)\n\nexport {\n  $sequences,\n  $logs,\n  addSequenceItem,\n  addLogRecord,\n  clearSequence,\n  resetLogs\n}\n","import React, { useMemo, useCallback, useEffect } from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Button, Input } from 'antd'\nimport { useStore } from 'effector-react'\nimport { $logs, addSequenceItem, addLogRecord, clearSequence, resetLogs } from '../../model'\nimport classes from './style.module.less'\n\nconst TEXTAREA_ROWS = 17\n\nexport const Root = () => {\n  const { formatMessage, formatDate } = useIntl()\n  const logs = useStore($logs)\n\n  const reset = useCallback(\n    () => {\n      clearSequence({ filter: () => false })\n      resetLogs()\n    },\n    []\n  )\n\n  const onResetClick = useCallback(\n    () => {\n      reset()\n    },\n    [reset]\n  )\n\n  const buttons = useMemo(\n    () => new Array(3).fill(undefined).map((_, index) => {\n      const onBtnClick = () => {\n        addSequenceItem({\n          handler ({ delayInSec }) {\n            const date = formatDate(new Date(), {\n              hour: 'numeric',\n              minute: 'numeric',\n              day: 'numeric',\n              month: 'numeric',\n              year: 'numeric'\n            })\n\n            addLogRecord(\n              formatMessage({\n                id: 'sequences.logMessage'\n              }, {\n                index: index + 1,\n                date,\n                delay: delayInSec\n              })\n            )\n          }\n        })\n      }\n\n      return (\n        <div key={index}>\n          <Button onClick={onBtnClick}>\n            <FormattedMessage id={`sequences.button${index + 1}`} />\n          </Button>\n        </div>\n      )\n    }),\n    [formatDate, formatMessage]\n  )\n\n  useEffect(\n    () => {\n      return () => {\n        reset()\n      }\n    },\n    [reset]\n  )\n\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.buttons}>\n        {buttons}\n      </div>\n\n      <div>\n        <Input.TextArea\n          className={classes.textarea}\n          readOnly\n          rows={TEXTAREA_ROWS}\n          value={logs.join('\\n')}\n        />\n      </div>\n\n      <div className={classes.footer}>\n        <Button onClick={onResetClick}>\n          <FormattedMessage id='sequences.reset' />\n        </Button>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Router as ReachRouter } from '@reach/router'\nimport { IRoutesSchema, mapRoutesSchemaToJsx } from 'features/@core'\n\nimport { TodosPage } from 'features/todos'\nimport { AboutPage } from 'features/about'\nimport { SettingsPage } from 'features/settings'\nimport { SequencesPage } from 'features/sequences'\n\nconst appRoutes: IRoutesSchema = {\n  '/': TodosPage,\n  '/about': AboutPage,\n  '/settings': SettingsPage,\n  '/sequences': SequencesPage\n}\n\nexport const Router = () => (\n  <ReachRouter>\n    {mapRoutesSchemaToJsx(appRoutes)}\n  </ReachRouter>\n)","import React from 'react'\nimport { TodosRoot } from '../organisms/root'\nimport { TodosTemplate } from '../templates/todos-template'\n\nexport const TodosPage = () => {\n  return (\n    <TodosTemplate>\n      <TodosRoot />\n    </TodosTemplate>\n  )\n}\n","import React from 'react'\nimport { BaseTemplate, Container } from 'features/@core'\n\nexport const AboutPage = () => {\n  return (\n    <BaseTemplate pageTitle='About me'>\n      <Container>\n        Its page about me!\n      </Container>\n    </BaseTemplate>\n  )\n}\n","import React from 'react'\nimport { BaseTemplate, Container } from 'features/@core'\nimport { Root } from '../organisms/root'\n\nexport const SettingsPage = () => {\n  return (\n    <BaseTemplate>\n      <Container>\n        <Root />\n      </Container>\n    </BaseTemplate>\n  )\n}\n","import React from 'react'\nimport { BaseTemplate, Container } from 'features/@core'\nimport { Root } from '../organisms/root'\nimport { FormattedMessage } from 'react-intl'\n\nexport const SequencesPage = () => {\n  return (\n    <BaseTemplate pageTitle={<FormattedMessage id='sequences' />}>\n      <Container>\n        <Root />\n      </Container>\n    </BaseTemplate>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from 'app'\nimport { serviceWorker } from 'features/@core'\nimport 'styles/index.less'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useEffect } from 'react'\nimport { IntlProvider } from 'react-intl'\nimport getUserLocale from 'get-user-locale'\nimport { useStore } from 'effector-react'\nimport { $locale, $intl, changeLocale, AvailableLocales } from 'features/@intl'\nimport { Router } from './router'\n\nexport const App = () => {\n  const intl = useStore($intl)\n  const locale = useStore($locale)\n\n  useEffect(\n    () => {\n      if (!locale) {\n        const userLocale = getUserLocale()\n\n        if (Object.values(AvailableLocales).map(String).includes(userLocale)) {\n          changeLocale(userLocale as AvailableLocales)\n        } else {\n          changeLocale(Object.values(AvailableLocales)[0])\n        }\n      }\n    },\n    [locale]\n  )\n\n  if (locale === null || !Object.keys(intl.data).length) {\n    return null\n  }\n\n  return (\n    <IntlProvider\n      locale={locale}\n      messages={intl.data}\n    >\n      <Router />\n    </IntlProvider>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"src-features-todos-organisms-root-style-module__grid--kneSM\",\"filter\":\"src-features-todos-organisms-root-style-module__filter--2MCgq\",\"form\":\"src-features-todos-organisms-root-style-module__form--G-Uyz\",\"list\":\"src-features-todos-organisms-root-style-module__list--2tvYs\"};","import React, { useMemo } from 'react'\nimport cn from 'classnames'\nimport classes from './style.module.less'\n\ninterface IProps {\n  children: React.ReactNode\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport const Container = ({ children, className, style }: IProps) => {\n  const ownStyle = useMemo(\n    () => {\n      if (style) {\n        const { width, margin, ...eachStyles } = style\n\n        return eachStyles\n      }\n    },\n    [style]\n  )\n\n  return (\n    <div\n      className={cn(classes.wrapper, className)}\n      style={ownStyle}\n    >\n      {children}\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"src-features-sequences-organisms-root-style-module__wrapper--2mX6h\",\"buttons\":\"src-features-sequences-organisms-root-style-module__buttons--1nNpe\",\"textarea\":\"src-features-sequences-organisms-root-style-module__textarea--2p4uA\",\"footer\":\"src-features-sequences-organisms-root-style-module__footer--H1lLk\"};"],"sourceRoot":""}